<link
  rel="stylesheet"
  href="https://cdn.trieve.ai/beta/search-component/index.css"
>

<div class="trieve-inline-root"></div>

<script type="module">
  import {renderToDiv} from 'https://cdn.trieve.ai/beta/search-component/vanilla/index.js';
  import {addToCart, checkCartQuantity} from '{{'cart-manager.js' | asset_url}}';

  const inlineRoot = document.querySelector(".trieve-inline-root");
  const appMetafieldTrieve = {{ app.metafields.trieve | json }};
  const blockSettings = {{ block.settings | json }};
  const productId = {{ product.id | json }};
  const productTitle = {{ product.title | json }};
  const productMetafieldsTrieve = {{ product.metafields.trieve | json }};
  let trievePDPQuestions = null;
  if (productMetafieldsTrieve && Object.keys(productMetafieldsTrieve).includes("trievePDPQuestions")) {
    trievePDPQuestions = productMetafieldsTrieve.trievePDPQuestions;
  }
  let defaultAiQuestions = null;
  if (trievePDPQuestions && trievePDPQuestions.length > 0) {
    defaultAiQuestions = trievePDPQuestions.map((question) => question.text);
  }

  const toBool = (value) => value === 'true' || value === true;
  const getValue = (value, defaultValue) => {
    if (value === null || value === undefined || value === '') {
      return defaultValue;
    }
    return value;
  };

  if (!appMetafieldTrieve.dataset_id || !appMetafieldTrieve.api_key) {
    console.error("Trieve: Cannot render inline Triece comopnent due to missing dataset_id or api_key in the app metafields");
  } else {
    renderToDiv(inlineRoot, {
      inline: true,
      apiKey: appMetafieldTrieve.api_key,
      datasetId: appMetafieldTrieve.dataset_id,
      baseUrl: getValue("{{ block.settings.base_url }}", "http://localhost:8090"),
      type: "ecommerce",
      useGroupSearch: true,
      allowSwitchingModes: toBool(getValue("{{ block.settings.allow_switching_modes }}", true)),
      zIndex: Number(getValue("{{ block.settings.z_index }}", 2147483645)),
      scaleRem: true,
      defaultSearchMode: getValue("{{ block.settings.default_search_mode }}", "chat"),
      brandName: getValue("{{ block.settings.brand_name }}", ""),
      brandColor: getValue("{{ block.settings.brand_color }}", ""),
      placeholder: getValue("{{ block.settings.placeholder }}", "Search..."),
      chatPlaceholder: getValue("{{ block.settings.chat_placeholder }}", "Ask Anything..."),
      suggestedQueries: toBool(getValue("{{ block.settings.suggested_queries }}", true)),
      followupQuestions: toBool(getValue("{{ block.settings.suggested_queries }}", true)),
      numberOfSuggestions: Number(getValue("{{ block.settings.number_of_suggestions }}", 3)),
      defaultAiQuestions,
      theme: getValue("{{ block.settings.theme }}", "light"),
      inlineHeader: "{{ block.settings.inline_header }} ",
      groupTrackingId: productId ? productId.toString() : undefined,
      cleanGroupName: productTitle ?? undefined,
      onAddToCart: (chunk) => {
        addToCart(parseInt(chunk.tracking_id))
      },
      getCartQuantity: (trackingId) => {
        return checkCartQuantity(parseInt(trackingId));
      },
      hideOpenButton: true,
    });
  }
</script>

{% comment %}
  see more about the schema section here. https://shopify.dev/docs/storefronts/themes/architecture/sections/section-schema#schema

  If the input is not valid json, it will not work
{% endcomment %}
{% schema %}
{
  "name": "Trieve Product Chat",
  "target": "section"
}
{% endschema %}
